package com.shyfay.usual.base;

/**
 * @Description 位移运算
 * @Author winston
 * @Since 10/23/2019
 */
public class DisplacementOperation {
    public static void main(String[] args) {
        //右移，会将移除的位自动丢弃
        int int1 = 13 >> 2;
        System.out.println(int1);
        int1 = -13 >> 2;
        //-13在计算机中存储的二进制是： 1000 0000 0000 0000 0000 0000 0000 1101
        //其在计算机中存储的二进制串是： 1111 1111 1111 1111 1111 1111 1111 0010 + 1 ->
        // 1111 1111 1111 1111 1111 1111 1111 0011 然后右移两位得到
        // 1111 1111 1111 1111 1111 1111 1111 1100 然后-1 得到
        // 1111 1111 1111 1111 1111 1111 1111 1011 然后将除符号位以外的取反得到
        // 1000 0000 0000 0000 0000 0000 0000 0100
        System.out.println(int1);
        int1 = -13 << 2;
        System.out.println(int1);
        //左移运算，左边自动补0
        int int2 = 13 << 2;
        System.out.println(int2);
        //无符号右移运算,
        int int3 = -1 >>> 2;
        System.out.println(int3);
    }
}

//1000 0000 0000 0000 0000 0000 0000 0000
//-23
//-23的原码
//1000 0000 0000 0000 0000 0000 0001 0111
//-23除符号位的按位取反得到
//1111 1111 1111 1111 1111 1111 1110 1000
//再+1得到反码，即-23在内存中存储的2进制串
//1111 1111 1111 1111 1111 1111 1110 1001
//右移2位得到
//1111 1111 1111 1111 1111 1111 1111 1010
//-1得到
//1111 1111 1111 1111 1111 1111 1111 1001
//除符号位以外的按位取反,得到
//1000 0000 0000 0000 0000 0000 0000 0110
//即10进制的-6